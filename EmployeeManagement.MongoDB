import com.mongodb.client.*;
import com.mongodb.client.model.Filters;
import org.bson.Document;

import java.util.Scanner;

public class EmployeeManagementMongoDB {

    // MongoDB Connection URI
    private static final String MONGO_URI = "mongodb://localhost:27017";
    private static final String DATABASE_NAME = "companyDB";
    private static final String COLLECTION_NAME = "employees";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        try (MongoClient mongoClient = MongoClients.create(MONGO_URI)) {
            MongoDatabase database = mongoClient.getDatabase(DATABASE_NAME);
            MongoCollection<Document> collection = database.getCollection(COLLECTION_NAME);

            do {
                System.out.println("\n-----------------------");
                System.out.println("   1. Create Employee");
                System.out.println("   2. Display Employees");
                System.out.println("   3. Appraisal (Update Salary)");
                System.out.println("   4. Search by Designation");
                System.out.println("   5. Remove Employee");
                System.out.println("   6. Exit");
                System.out.println("-----------------------");
                System.out.print("Enter choice: ");
                choice = scanner.nextInt();

                switch (choice) {
                    case 1 -> createEmployee(collection, scanner);
                    case 2 -> displayEmployees(collection);
                    case 3 -> updateSalary(collection, scanner);
                    case 4 -> searchByDesignation(collection, scanner);
                    case 5 -> removeEmployee(collection, scanner);
                    case 6 -> System.out.println("Exiting...");
                    default -> System.out.println("Invalid choice! Try again.");
                }
            } while (choice != 6);
        }

        scanner.close();
    }

    // Method to create an employee
    private static void createEmployee(MongoCollection<Document> collection, Scanner scanner) {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Age: ");
        int age = scanner.nextInt();
        System.out.print("Enter Salary: ");
        double salary = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter Designation: ");
        String designation = scanner.nextLine();
        System.out.print("Enter Department: ");
        String department = scanner.nextLine();

        Document employee = new Document("_id", id)
                .append("name", name)
                .append("age", age)
                .append("salary", salary)
                .append("designation", designation)
                .append("department", department);

        collection.insertOne(employee);
        System.out.println("Employee added successfully!");
    }

    // Method to display all employees
    private static void displayEmployees(MongoCollection<Document> collection) {
        System.out.println("\n--- Employee List ---");
        try (MongoCursor<Document> cursor = collection.find().iterator()) {
            while (cursor.hasNext()) {
                Document doc = cursor.next();
                System.out.println(doc.toJson());
            }
        }
    }

    // Method to update salary (Appraisal)
    private static void updateSalary(MongoCollection<Document> collection, Scanner scanner) {
        System.out.print("Enter Employee ID for appraisal: ");
        int id = scanner.nextInt();
        System.out.print("Enter Salary Adjustment (+/-): ");
        double adjustment = scanner.nextDouble();

        Document employee = collection.find(Filters.eq("_id", id)).first();
        if (employee != null) {
            double newSalary = employee.getDouble("salary") + adjustment;
            collection.updateOne(Filters.eq("_id", id), new Document("$set", new Document("salary", newSalary)));
            System.out.println("Updated salary: " + newSalary);
        } else {
            System.out.println("Employee not found!");
        }
    }

    // Method to search employees by designation
    private static void searchByDesignation(MongoCollection<Document> collection, Scanner scanner) {
        System.out.print("Enter Designation to search: ");
        scanner.nextLine(); // Consume newline
        String designation = scanner.nextLine();

        System.out.println("\n--- Employees with Designation: " + designation + " ---");
        try (MongoCursor<Document> cursor = collection.find(Filters.eq("designation", designation)).iterator()) {
            while (cursor.hasNext()) {
                System.out.println(cursor.next().toJson());
            }
        }
    }

    // Method to remove an employee
    private static void removeEmployee(MongoCollection<Document> collection, Scanner scanner) {
        System.out.print("Enter Employee ID to remove: ");
        int id = scanner.nextInt();

        collection.deleteOne(Filters.eq("_id", id));
        System.out.println("Employee removed successfully!");
    }
}
